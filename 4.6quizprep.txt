Reader-Writer problem

single writer -> [buffer]-> any number of reader can work on this buffer, but when writer is writing, reader cannot access.
1 semaphore is needed.
mutual exclusiveness of writer and reader.
need to keep track of number of readers that are reading.

writer process: wait ->write ->signal /// reader process: (dunno gotta read more about it. ask kj)

Desired (ideal) solution:
entry: [mutual exclusion: one process can be in CS, progress: process wishing to access should be able to enter immediately if no other thread,
        bounded wait time: number of times that other processes enter CS while a process waits for entering CS should exist.]
[critical section]
exit:

dining philosopher's problem: if one philsopher is waiting for a chopstick i and i +1 and the other philsopher is waiting for a chopstick i+1, i+2;
                              then we have a problem because if i and i + 1 become free they are taken by each professor and the first professor is waiting 
                              for the chopstick indefinitely. (deadlock).

Deadlock problem:
    multiple processes are waiting for the other to finish; thus neither ever finishes

starvation vs Deadlock:
    starvation: thread waits indefinitely. can still end after waiting for a whileee.
    deadlock: circular waiting for resources. can't end without external intervention.

possible quiz question: what's the difference between deadlock and starvation. 

Deadlock => starvation but not vice versa.


solution to the deadlock problem:
    1. more chopsticks/remove philosopher.
    2. rollback
    3. pre-empt with priority
    4. atomic (picking up two chopstick should be one action) move to critical section

Monitor:
    A high level abstraction that provides a convenient and effective mechanism for process sync
    (next level semaphore). semaphore mutex = 1, next = 0; int next-count=0;

monitor diningphilsopher summary[written in the slides];
how to ensure that only one process may be active within the monitor at a time:
    -use semaphore duh.


possible quiz question: resource allocation graph: is there are deadlock or no?


methods for handling deadlocks:
    1. proactive - deadlock prevention & avoidance
    2. reactive - deadlock detection & recovery
    3. no handling = ignore the problem and pretend that deadlocks never occur in the system.

Deadlock happens when these 4 conditions are held at the same time:
    1. mutual exclusion (limited resources: (ex. printer spooling, allow sharing).
    2. no preemption (allow preemption with saving/restoring state)
    3. hold and wait
    4. circular wait

remove these by removing...:
    1. limited resources; (allow sharing buy more or make them sharable)
    2. No preemption; (store states, registers and restoring state.)
    3. hold and wait (wait on all resource all at once instead of one by one)
    4. circular wait 

Deadlock avoidance:
    divide the states, make sure that the system never enters the unsafe state.

Safe state: what is safe state?
    A system is safe if there exists any resource allocation order that does not incur a deadlock situation.

in simpler terms...
 if P1 resources needs are not immdediately available, then P1 can wait until all P2 have finished
 when P2 is finished then P1 can obtain needed resources, execute, return allocated resources and terminate
 when P1 terminate P3 can obtain its needed resources and so on and so forth.

single instance of a resource type:
    resource allocation graph
multiple instances of a resource type:
    banker's algorithm

single instance of a resource type (1 of resource type available):
    additional edge: claim edge => dashed line.

the request can be granted only if the converting request edge to an assignment edge does not result
in the formation of a cycle in the resouce allocation graph.